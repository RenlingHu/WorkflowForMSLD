#! /usr/bin/env python

# Write out the remaining files needed to run MSLD Simulations

import numpy as np
import pandas as pd
import glob,os
import msld_prm

#####################################################

class WriteError(Exception):
    import sys
    sys.exit

#####################################################

def writeALF_Files(sysname,outdir,cgenff,boxsize,pmegrid):
    """
    Write CHARMM input script that's needed by ALF (the prep/${sysname}.inp file)
    (compatible with current version of ALF 3.0)
    """

    # load in nsubs/nsites
    fp=open(outdir+'/nsubs','r')
    nsubs=[]
    for sub in fp.readline().split():
        nsubs.append(int(sub))
    nsites=len(nsubs)
    fp.close()

    # generate Snames
    Snames=[]
    for site in range(len(nsubs)):
        for sub in range(nsubs[site]):
            Sname="site"+str(site+1)+"_sub"+str(sub+1)
            Snames.append(Sname)
 
    # copy toppar & toppar.str into outdir
    if cgenff:
        os.system('if [ -d toppar ]; then cp toppar/toppar.stream '+outdir+'/; fi')
        os.system('if [ -d toppar ]; then cp -r toppar '+outdir+'/; fi')
    else:
        print("\n ** Manually copy toppar files into build."+sysname+" !! \n")

    # write n* files (nsubs, nblocks, & nreps written by msld_crn.py)
    fp=open(outdir+'/name','w')
    fp.write('%s' % (sysname))
    fp.close()
    fp=open(outdir+'/nnodes','w')
    fp.write('1')
    fp.close()
    fp=open(outdir+'/ncentral','w')
    fp.write('0')
    fp.close()

    # read outdir/*rtf files to get atom names for each fragment
    def readAtoms(filename):
        """ Read a given rtf and return atom names """
        atoms=[]
        fp=open(outdir+'/'+filename+'_pres.rtf','r')
        line=fp.readline()
        while line:
            if line[0:4] == 'ATOM':
                atoms.append(line.split()[1])
            line=fp.readline()
        fp.close()
        return atoms

    atomnames=[]
    for fname in Snames:
        atomnames.append(readAtoms(fname))

    ##debug#
    #for f in range(len(Snames)):
        #print(Snames[f],atomnames[f])
    #print()
    ##debug#

    # some default variables:
    fnex=5.5

    # write CHARMM scripts
    # ALF/CHARMM scripts first (mostly copied from process)
    fp=open(outdir+"/"+sysname+".inp","w")
    
    fp.write("* CHARMM input file for Multi-Site lambda-dynamics\n")
    fp.write("* generated by msld_py_prep (JV,LC) for ALF (RLH)\n")
    fp.write("*\n")
    fp.write("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n")
    fp.write("!  Multi-Site Lambda Dynamics \n")
    fp.write("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n")
    
    fp.write("set fnex = %s \n" % (fnex))
    fp.write("set sysname = "+sysname+"\n")
    fp.write("set builddir = prep\n")
    fp.write("set box = "+str(boxsize)+"\n")
    fp.write("set temp = 298.15\n")
    fp.write("set ligseg = lig\n")
    fp.write("set resnum = 1\n\n")
    
    fp.write("! perturbation variables\n")
    fp.write("set nsites = %d \n" % (len(nsubs)))
    for sub in range(len(nsubs)):
      fp.write("set nsubs%d = %d \n" % (sub+1,nsubs[sub]))
    fp.write("set nblocks = %d \n\n" % (sum(nsubs)))
    
    fp.write("banner\n")
    fp.write("UPPER\n")
    fp.write("bomblev -2\n")
    fp.write("wrnlev 0\n")
    fp.write("prnlev 5\n\n")

    if cgenff:
        fp.write("!! Read in toppar stream file\n")
        fp.write("stream @builddir/toppar.stream\n\n")
        fp.write("read rtf append card name @builddir/core.rtf\n")
        fp.write("read param flex append card name @builddir/full_ligand.prm\n\n")
    else:
        # Edit if non-cgenff force field specifics are needed:
        fp.write("!! Read in toppar stream file\n")
        fp.write("stream @builddir/toppar.str\n\n")
        fp.write("read rtf append card name @builddir/core.rtf\n")
        fp.write("read param flex append card name @builddir/full_ligand.prm\n\n")

    # commented protein lines
    fp.write("!! !! Reads coordinates and pdb file for the protein\n")
    fp.write("read sequ pdb name @builddir/protein.pdb\n")
    fp.write("generate PROA first NTER last CTER setup warn\n")
    fp.write("read coor pdb resid name @builddir/protein.pdb\n!! \n")
    fp.write("ic generate\nic param\nic build \nhbuild sele hydrogen end\nauto angle dihe\n\n")
    
    # move onto the ligand
    fp.write("!! Reads coordinates and pdb file for the ligand\n")
    fp.write("read sequ pdb name @builddir/core.pdb\n")
    fp.write("generate @ligseg setup\n")
    fp.write("read coor pdb resid name @builddir/core.pdb\n\n")

    fp.write("!! Read in the ligand patch rtf files\n")
    for fname in Snames:
        fp.write("read rtf append card name @builddir/%s_pres.rtf\n" % (fname))
    fp.write("\n")

    fp.write("!! Read in the ligand fragment pdb files\n")
    fp.write("ic generate\n\n")
    for Site in range(1,nsites+1):
      for Sub in range(1,nsubs[Site-1]+1):
        fp.write("patch p%d_%d @ligseg @resnum setup\n" % (Site,Sub))
        fp.write("read coor pdb resid name @builddir/site%d_sub%d_frag.pdb\n" % (Site,Sub))
        fp.write("ic param\n")
        fp.write("ic build\n\n")

    fp.write("!! Read in LonePair sites (if applicable)\n")
    fp.write("stream @builddir/lpsites.inp\n\n")

    fp.write("!! Define MSLD substituent selections\n")
    for fname in range(len(Snames)):
        fp.write("define %s - \n   select ( - \n" % (Snames[fname]))
        for at in atomnames[fname]:
            fp.write("   atom @ligseg @resnum %s .or. -\n" % (at))
        fp.write("   none ) end\n\n")

    # auto angles and dihedrals b/c msld_*.py scripts don't calculate them
    # remove angles and dihedrals between substituents at the same site
    fp.write("auto angle dihe  !! do not call after deleting sub-sub terms or loading in water\n")
    fp.write("bomblev -1\n\n")

    fp.write("! delete angles and dihedrals between alchem groups\n")
    fp.write("set ii = 1\n")
    fp.write("label deletesiteloop\n")
    fp.write("if @ii .le. @nsites then\n\n")
    fp.write("   set jj = 1\n")
    fp.write("   label delete1loop\n")
    fp.write("   if @jj .le. @nsubs@@ii then\n\n")
    fp.write("      calc kk = @jj + 1\n")
    fp.write("      label delete2loop\n")
    fp.write("      if @kk .le. @nsubs@@ii then\n\n")
    fp.write("         dele connectivity sele ( site@{ii}_sub@@jj ) show end sele ( site@{ii}_sub@@kk ) show end\n")
    #fp.write("         dele angle sele ( site@{ii}_sub@@jj ) show end sele ( site@{ii}_sub@@kk ) show end\n")
    #fp.write("         dele dihe  sele ( site@{ii}_sub@@jj ) show end sele ( site@{ii}_sub@@kk ) show end\n")
    #fp.write("         dele impr  sele ( site@{ii}_sub@@jj ) show end sele ( site@{ii}_sub@@kk ) show end\n\n")
    fp.write("         calc kk = @kk + 1\n")
    fp.write("         goto delete2loop\n")
    fp.write("      endif\n\n")
    fp.write("      calc jj = @jj + 1\n")
    fp.write("      goto delete1loop\n")
    fp.write("   endif\n\n")
    fp.write("   calc ii = @ii + 1\n")
    fp.write("   goto deletesiteloop\n")
    fp.write("endif\n\n")

    # useful for groups with linear bonds (e.g. cyanos or alkynes)
    fp.write("!! ! System specific deletion (linear groups)\n")
    fp.write("!! dele dihe sele (atom LIG 1 ATOMNAME) show end\n\n")

    fp.write("!! Load solvent\n")
    fp.write("read sequ pdb name @builddir/solv.pdb\n")
    fp.write("generate SOLV first none last none setup noangl nodihe\n")
    fp.write("read coor pdb resid name @builddir/solv.pdb\n\n")

    fp.write("!! !! Load ions\n")
    fp.write("read sequ pdb name @builddir/ions.pdb\n")
    fp.write("generate IONS first none last none setup noangl nodihe\n")
    fp.write("read coor pdb resid name @builddir/ions.pdb\n\n")

    fp.write("print coor sele .not. init end\n\n")
    fp.write("bomblev 0\n\n")

    fp.write("!! !! Write Initial System to Disk\n")
    fp.write("write psf card name complex_pbc.psf\n")
    fp.write("!! * patch psf file\n")
    fp.write("!! *\n")
    fp.write("write coor pdb card name complex_pbc.pdb\n")
    fp.write("!! * patch pdb file\n")
    fp.write("!! *\n")
    fp.write("write coor card name complex_pbc.crd\n")
    fp.write("!! * patch crd file\n")
    fp.write("!! *\n\n")
    
    fp.write("calc blockplusone = @nblocks + 1\n\n")

    fp.write("!! BLOCK setup\n")
    fp.write("BLOCK @blockplusone\n")
    fp.write("   clear\n")
    fp.write("END\n")
 
    fp.write("BLOCK @blockplusone !RX! NREP @nreps\n")
    for fname in range(len(Snames)):
        fp.write("   Call %d sele %s show end\n" % (fname+2,Snames[fname]))
    fp.write("\n")
    fp.write("   qldm theta\n")
    fp.write("   lang temp @temp\n")
    fp.write("   !RX! phmd ph 7\n")
    fp.write("   soft on   ! this turns on soft-cores\n")
    fp.write("   pmel ex   ! this turns on PME\n\n")
    fp.write("   ldin 1 1.0  0.0  12.0  0.0  5.0\n")
    Block=1
    for Site in range(1,nsites+1):
        for Sub in range(1,nsubs[Site-1]+1):
            Block+=1
            if Sub == 1:
                fp.write("   ldin %-2d %.4f 0.0  12.0  0.0 5.0 !RX! NONE\n" % (Block,1.0/nsubs[Site-1]))
            elif Sub % 2:
                fp.write("   ldin %-2d %.4f 0.0  12.0  0.0 5.0 !RX! UPOS 7.0\n" % (Block,1.0/nsubs[Site-1]))
            else:
                fp.write("   ldin %-2d %.4f 0.0  12.0  0.0 5.0 !RX! UNEG 7.0\n" % (Block,1.0/nsubs[Site-1]))
    fp.write("\n")
    
    numexcl=1
    excl=0
    fp.write("   set excl%d =" % (numexcl))
    Block0=1
    for Site in range(1,len(nsubs)+1):
        for Block1 in range(Block0+1,Block0+nsubs[Site-1]+1):
            for Block2 in range(Block1+1,Block0+nsubs[Site-1]+1):
                fp.write(" %d %d" % (Block1,Block2))
                excl=excl+1
                if excl == 11:
                    excl=0
                    numexcl=numexcl+1
                    fp.write("\n   set excl%d =" % (numexcl))
        Block0+=nsubs[Site-1]
    fp.write("\n")
    fp.write("   excl")
    for excl in range(numexcl):
        fp.write(" @excl%d" % (excl+1))
    fp.write("\n\n")
    
    fp.write("   rmla bond thet dihe impr \n")
    fp.write("   !rmla bond thet impr \n")
    fp.write("   msld 0")
    for Site in range(1,len(nsubs)+1):
        for Sub in range(1,nsubs[Site-1]+1):
            fp.write("  %d" % (Site,))
    fp.write("  fnex @fnex\n")
    fp.write("   msma\n\n")

    # for ALF 3.0+
    fp.write("   ! for ALF 3.0+")
    fp.write("   ! Check block.doc for functional form of these biasing potentials\n")
    fp.write("   !calc nbiaspot = 5 * ( @nblocks * ( @nblocks - 1 ) ) / 2\n")
    fp.write("   !ldbi @nbiaspot\n")
    fp.write("   !set ibias = 1\n")
    fp.write("   !set iblock = 0\n")
    fp.write("   !set si = 1\n")
    fp.write("   !label loop5_vb\n")
    fp.write("   !if @si .le. @nsites then\n")
    fp.write("      !set jblock = @iblock\n")
    fp.write("      !set sj = @si\n")
    fp.write("      !label loop5b_vb\n")
    fp.write("      !if @sj .le. @nsites then\n")
    fp.write("         !set ii = 1\n")
    fp.write("         !label loop6_vb\n")
    fp.write("         !if @ii .le. @nsubs@@{si} then\n")
    fp.write("            !calc ip1 = @ii + 1 + @iblock\n")
    fp.write("            !set jj = 1\n")
    fp.write("            !if @si .eq. @sj then\n")
    fp.write("               !calc jj = @ii + 1\n")
    fp.write("            !endif\n")
    fp.write("            !label loop7_vb\n")
    fp.write("            !if @jj .le. @nsubs@@{sj} then\n")
    fp.write("               !calc jp1 = @jj + 1 + @jblock\n")
    fp.write("   \n")
    fp.write("               !set c_shift = 0.0\n")
    fp.write("               !set x_shift = 0.0\n")
    fp.write("               !set s_shift = 0.0\n")
    fp.write("               !vbrex! if @si .eq. @sj then\n")
    fp.write("               !vbrex!    calc c_shift = 1.2 * (@myrep - @ncentral)\n")
    fp.write("               !vbrex!    calc s_shift = 0.3 * (@myrep - @ncentral)\n")
    fp.write("               !vbrex! endif\n")
    fp.write("   \n")
    fp.write("               !calc coeff = @cs@@{si}s@@{ii}s@@{sj}s@@{jj} + @{c_shift}\n")
    fp.write("               !ldbv @ibias @ip1 @jp1 6 0.0 @coeff 0\n")
    fp.write("               !calc ibias = @ibias + 1\n")
    fp.write("               !calc coeff = @xs@@{si}s@@{ii}s@@{sj}s@@{jj} + @{x_shift}\n")
    fp.write("               !ldbv @ibias @ip1 @jp1 10 -5.56 @coeff 0\n")
    fp.write("               !calc ibias = @ibias + 1\n")
    fp.write("               !calc coeff = @ss@@{si}s@@{ii}s@@{sj}s@@{jj} + @{s_shift}\n")
    fp.write("               !ldbv @ibias @ip1 @jp1 8 0.017 @coeff 0\n")
    fp.write("               !calc ibias = @ibias + 1\n")
    fp.write("               !calc coeff = @xs@@{sj}s@@{jj}s@@{si}s@@{ii} + @{x_shift}\n")
    fp.write("               !ldbv @ibias @jp1 @ip1 10 -5.56 @coeff 0\n")
    fp.write("               !calc ibias = @ibias + 1\n")
    fp.write("               !calc coeff = @ss@@{sj}s@@{jj}s@@{si}s@@{ii} + @{s_shift}\n")
    fp.write("               !ldbv @ibias @jp1 @ip1 8 0.017 @coeff 0\n")
    fp.write("               !calc ibias = @ibias + 1\n")
    fp.write("               !calc jj = @jj + 1\n")
    fp.write("               !goto loop7_vb\n")
    fp.write("            !endif\n")
    fp.write("            !calc ii = @ii + 1\n")
    fp.write("            !goto loop6_vb\n")
    fp.write("         !endif\n")
    fp.write("         !calc jblock = @jblock + @nsubs@@{sj}\n")
    fp.write("         !calc sj = @sj + 1\n")
    fp.write("         !goto loop5b_vb\n")
    fp.write("      !endif\n")
    fp.write("      !calc iblock = @iblock + @nsubs@@{si}\n")
    fp.write("      !calc si = @si + 1\n")
    fp.write("      !goto loop5_vb\n")
    fp.write("   !endif\n")

    fp.write("END\n\n")

    fp.write("!! Create water box & periodic images\n")
    fp.write("coor stat\n")
    fp.write("crystal define cubic @box @box @box 90. 90. 90.\n")
    fp.write("crystal build cutoff 14 nope 0\n")
    fp.write("image byres xcen 0 ycen 0 zcen 0 sele resn tip3 .or. resn sod .or. resn cla end\n")
    fp.write("image byseg xcen 0 ycen 0 zcen 0 sele .not. ( resn tip3 .or. resn sod .or. resn cla ) end\n\n")
    fp.write("!! Copy main coords into comp set\n")
    fp.write("cons harm clear\ncoor copy comp\n\n")

    # turn off NOEs by default - makes more user customizable

    fp.write("!! !! Set NOE distance restraints\n")
    fp.write("!! NOE\n")
    fp.write("!!    RESET\n")
    fp.write("!! END\n")
    fp.write("!! \n")
    fp.write("faster on\n")
    fp.write("NBONDS CUTNB 14 CTOFNB 12 CTONNB 10 ")
    fp.write("NBONDS EWALD PMEWald Kappa 0.34 Order 4 FFTX "+str(pmegrid)+" FFTY "+str(pmegrid)+" FFTZ "+str(pmegrid)+"\n\n")

    fp.write("!Cleans up all previous constraints\n")
    fp.write("!clean up all fixed constraint\n")
    fp.write("CONS FIX SELE NONE END\n")
    fp.write("!clean up all harmonic restraint\n")
    fp.write("CONS HARM CLEAR\n")
    fp.write("!clean all distance constraints\n")
    fp.write("NOE\n")
    fp.write(" RESET\n")
    fp.write(" END\n")
    fp.write("!clean up all dihedral constraints\n")
    fp.write("CONS CLDH\n\n")

    fp.write("SHAKE OFF\n\n")

    fp.write("MINI SD NSTEP 1000 NPRINT 50 TOLGRD 3\n")
    fp.write("MINI CONJ NSTEP 200 NPRINT 50 TOLGRD 0.1 TOLENR 0 TOLSTP 0.000000\n\n")

    fp.write("IOFOrmat exte\n")
    fp.write("!! !! Write Initial System to Disk\n")
    fp.write("write psf card name complex_mini.psf\n")
    fp.write("write coor pdb card name complex_mini.pdb\n")
    fp.write("write coor card name complex_mini.crd\n\n")

    fp.write("ENERGY\n\n")

    fp.write("STOP\n\n")
    
    fp.close()

# ALF/CHARMM scripts first (mostly copied from process)
    fp=open(outdir+"/"+sysname+"-lig.inp","w")
    
    fp.write("* CHARMM input file for Multi-Site lambda-dynamics\n")
    fp.write("* generated by msld_py_prep (JV,LC) for ALF (RLH)\n")
    fp.write("*\n")
    fp.write("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n")
    fp.write("!  Multi-Site Lambda Dynamics \n")
    fp.write("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n")
    
    fp.write("set fnex = %s \n" % (fnex))
    fp.write("set sysname = "+sysname+"\n")
    fp.write("set builddir = prep\n")
    fp.write("set box = "+str(boxsize)+"\n")
    fp.write("set temp = 298.15\n")
    fp.write("set ligseg = lig\n")
    fp.write("set resnum = 1\n\n")
    
    fp.write("! perturbation variables\n")
    fp.write("set nsites = %d \n" % (len(nsubs)))
    for sub in range(len(nsubs)):
      fp.write("set nsubs%d = %d \n" % (sub+1,nsubs[sub]))
    fp.write("set nblocks = %d \n\n" % (sum(nsubs)))
    
    fp.write("banner\n")
    fp.write("UPPER\n")
    fp.write("bomblev -2\n")
    fp.write("wrnlev 0\n")
    fp.write("prnlev 5\n\n")

    if cgenff:
        fp.write("!! Read in toppar stream file\n")
        fp.write("stream @builddir/toppar.stream\n\n")
        fp.write("read rtf append card name @builddir/core.rtf\n")
        fp.write("read param flex append card name @builddir/full_ligand.prm\n\n")
    else:
        # Edit if non-cgenff force field specifics are needed:
        fp.write("!! Read in toppar stream file\n")
        fp.write("stream @builddir/toppar.str\n\n")
        fp.write("read rtf append card name @builddir/core.rtf\n")
        fp.write("read param flex append card name @builddir/full_ligand.prm\n\n")
    
    # move onto the ligand
    fp.write("!! Reads coordinates and pdb file for the ligand\n")
    fp.write("read sequ pdb name @builddir/core.pdb\n")
    fp.write("generate @ligseg setup\n")
    fp.write("read coor pdb resid name @builddir/core.pdb\n\n")

    fp.write("!! Read in the ligand patch rtf files\n")
    for fname in Snames:
        fp.write("read rtf append card name @builddir/%s_pres.rtf\n" % (fname))
    fp.write("\n")

    fp.write("!! Read in the ligand fragment pdb files\n")
    fp.write("ic generate\n\n")
    for Site in range(1,nsites+1):
      for Sub in range(1,nsubs[Site-1]+1):
        fp.write("patch p%d_%d @ligseg @resnum setup\n" % (Site,Sub))
        fp.write("read coor pdb resid name @builddir/site%d_sub%d_frag.pdb\n" % (Site,Sub))
        fp.write("ic param\n")
        fp.write("ic build\n\n")

    fp.write("!! Read in LonePair sites (if applicable)\n")
    fp.write("stream @builddir/lpsites.inp\n\n")

    fp.write("!! Define MSLD substituent selections\n")
    for fname in range(len(Snames)):
        fp.write("define %s - \n   select ( - \n" % (Snames[fname]))
        for at in atomnames[fname]:
            fp.write("   atom @ligseg @resnum %s .or. -\n" % (at))
        fp.write("   none ) end\n\n")

    # auto angles and dihedrals b/c msld_*.py scripts don't calculate them
    # remove angles and dihedrals between substituents at the same site
    fp.write("auto angle dihe  !! do not call after deleting sub-sub terms or loading in water\n")
    fp.write("bomblev -1\n\n")

    fp.write("! delete angles and dihedrals between alchem groups\n")
    fp.write("set ii = 1\n")
    fp.write("label deletesiteloop\n")
    fp.write("if @ii .le. @nsites then\n\n")
    fp.write("   set jj = 1\n")
    fp.write("   label delete1loop\n")
    fp.write("   if @jj .le. @nsubs@@ii then\n\n")
    fp.write("      calc kk = @jj + 1\n")
    fp.write("      label delete2loop\n")
    fp.write("      if @kk .le. @nsubs@@ii then\n\n")
    fp.write("         dele connectivity sele ( site@{ii}_sub@@jj ) show end sele ( site@{ii}_sub@@kk ) show end\n")
    #fp.write("         dele angle sele ( site@{ii}_sub@@jj ) show end sele ( site@{ii}_sub@@kk ) show end\n")
    #fp.write("         dele dihe  sele ( site@{ii}_sub@@jj ) show end sele ( site@{ii}_sub@@kk ) show end\n")
    #fp.write("         dele impr  sele ( site@{ii}_sub@@jj ) show end sele ( site@{ii}_sub@@kk ) show end\n\n")
    fp.write("         calc kk = @kk + 1\n")
    fp.write("         goto delete2loop\n")
    fp.write("      endif\n\n")
    fp.write("      calc jj = @jj + 1\n")
    fp.write("      goto delete1loop\n")
    fp.write("   endif\n\n")
    fp.write("   calc ii = @ii + 1\n")
    fp.write("   goto deletesiteloop\n")
    fp.write("endif\n\n")

    # useful for groups with linear bonds (e.g. cyanos or alkynes)
    fp.write("!! ! System specific deletion (linear groups)\n")
    fp.write("!! dele dihe sele (atom LIG 1 ATOMNAME) show end\n\n")

    fp.write("!! Load solvent\n")
    fp.write("read sequ pdb name @builddir/solv.pdb\n")
    fp.write("generate SOLV first none last none setup noangl nodihe\n")
    fp.write("read coor pdb resid name @builddir/solv.pdb\n\n")

    fp.write("!! !! Load ions\n")
    fp.write("!! read sequ pdb name @builddir/ions.pdb\n")
    fp.write("!! generate IONS first none last none setup noangl nodihe\n")
    fp.write("!! read coor pdb resid name @builddir/ions.pdb\n\n")

    fp.write("print coor sele .not. init end\n\n")
    fp.write("bomblev 0\n\n")

    fp.write("!! !! Write Initial System to Disk\n")
    fp.write("write psf card name ligand_pbc.psf\n")
    fp.write("!! * patch psf file\n")
    fp.write("!! *\n")
    fp.write("write coor pdb card name ligand_pbc.pdb\n")
    fp.write("!! * patch pdb file\n")
    fp.write("!! *\n")
    fp.write("write coor card name ligand_pbc.crd\n")
    fp.write("!! * patch crd file\n")
    fp.write("!! *\n\n")
    
    fp.write("calc blockplusone = @nblocks + 1\n\n")

    fp.write("!! BLOCK setup\n")
    fp.write("BLOCK @blockplusone\n")
    fp.write("   clear\n")
    fp.write("END\n")
 
    fp.write("BLOCK @blockplusone !RX! NREP @nreps\n")
    for fname in range(len(Snames)):
        fp.write("   Call %d sele %s show end\n" % (fname+2,Snames[fname]))
    fp.write("\n")
    fp.write("   qldm theta\n")
    fp.write("   lang temp @temp\n")
    fp.write("   !RX! phmd ph 7\n")
    fp.write("   soft on   ! this turns on soft-cores\n")
    fp.write("   pmel ex   ! this turns on PME\n\n")
    fp.write("   ldin 1 1.0  0.0  12.0  0.0  5.0\n")
    Block=1
    for Site in range(1,nsites+1):
        for Sub in range(1,nsubs[Site-1]+1):
            Block+=1
            if Sub == 1:
                fp.write("   ldin %-2d %.4f 0.0  12.0  0.0 5.0 !RX! NONE\n" % (Block,1.0/nsubs[Site-1]))
            elif Sub % 2:
                fp.write("   ldin %-2d %.4f 0.0  12.0  0.0 5.0 !RX! UPOS 7.0\n" % (Block,1.0/nsubs[Site-1]))
            else:
                fp.write("   ldin %-2d %.4f 0.0  12.0  0.0 5.0 !RX! UNEG 7.0\n" % (Block,1.0/nsubs[Site-1]))
    fp.write("\n")
    
    numexcl=1
    excl=0
    fp.write("   set excl%d =" % (numexcl))
    Block0=1
    for Site in range(1,len(nsubs)+1):
        for Block1 in range(Block0+1,Block0+nsubs[Site-1]+1):
            for Block2 in range(Block1+1,Block0+nsubs[Site-1]+1):
                fp.write(" %d %d" % (Block1,Block2))
                excl=excl+1
                if excl == 11:
                    excl=0
                    numexcl=numexcl+1
                    fp.write("\n   set excl%d =" % (numexcl))
        Block0+=nsubs[Site-1]
    fp.write("\n")
    fp.write("   excl")
    for excl in range(numexcl):
        fp.write(" @excl%d" % (excl+1))
    fp.write("\n\n")
    
    fp.write("   rmla bond thet dihe impr \n")
    fp.write("   !rmla bond thet impr \n")
    fp.write("   msld 0")
    for Site in range(1,len(nsubs)+1):
        for Sub in range(1,nsubs[Site-1]+1):
            fp.write("  %d" % (Site,))
    fp.write("  fnex @fnex\n")
    fp.write("   msma\n\n")

    # for ALF 3.0+
    fp.write("   ! for ALF 3.0+")
    fp.write("   ! Check block.doc for functional form of these biasing potentials\n")
    fp.write("   !calc nbiaspot = 5 * ( @nblocks * ( @nblocks - 1 ) ) / 2\n")
    fp.write("   !ldbi @nbiaspot\n")
    fp.write("   !set ibias = 1\n")
    fp.write("   !set iblock = 0\n")
    fp.write("   !set si = 1\n")
    fp.write("   !label loop5_vb\n")
    fp.write("   !if @si .le. @nsites then\n")
    fp.write("      !set jblock = @iblock\n")
    fp.write("      !set sj = @si\n")
    fp.write("      !label loop5b_vb\n")
    fp.write("      !if @sj .le. @nsites then\n")
    fp.write("         !set ii = 1\n")
    fp.write("         !label loop6_vb\n")
    fp.write("         !if @ii .le. @nsubs@@{si} then\n")
    fp.write("            !calc ip1 = @ii + 1 + @iblock\n")
    fp.write("            !set jj = 1\n")
    fp.write("            !if @si .eq. @sj then\n")
    fp.write("               !calc jj = @ii + 1\n")
    fp.write("            !endif\n")
    fp.write("            !label loop7_vb\n")
    fp.write("            !if @jj .le. @nsubs@@{sj} then\n")
    fp.write("               !calc jp1 = @jj + 1 + @jblock\n")
    fp.write("   \n")
    fp.write("               !set c_shift = 0.0\n")
    fp.write("               !set x_shift = 0.0\n")
    fp.write("               !set s_shift = 0.0\n")
    fp.write("               !vbrex! if @si .eq. @sj then\n")
    fp.write("               !vbrex!    calc c_shift = 1.2 * (@myrep - @ncentral)\n")
    fp.write("               !vbrex!    calc s_shift = 0.3 * (@myrep - @ncentral)\n")
    fp.write("               !vbrex! endif\n")
    fp.write("   \n")
    fp.write("               !calc coeff = @cs@@{si}s@@{ii}s@@{sj}s@@{jj} + @{c_shift}\n")
    fp.write("               !ldbv @ibias @ip1 @jp1 6 0.0 @coeff 0\n")
    fp.write("               !calc ibias = @ibias + 1\n")
    fp.write("               !calc coeff = @xs@@{si}s@@{ii}s@@{sj}s@@{jj} + @{x_shift}\n")
    fp.write("               !ldbv @ibias @ip1 @jp1 10 -5.56 @coeff 0\n")
    fp.write("               !calc ibias = @ibias + 1\n")
    fp.write("               !calc coeff = @ss@@{si}s@@{ii}s@@{sj}s@@{jj} + @{s_shift}\n")
    fp.write("               !ldbv @ibias @ip1 @jp1 8 0.017 @coeff 0\n")
    fp.write("               !calc ibias = @ibias + 1\n")
    fp.write("               !calc coeff = @xs@@{sj}s@@{jj}s@@{si}s@@{ii} + @{x_shift}\n")
    fp.write("               !ldbv @ibias @jp1 @ip1 10 -5.56 @coeff 0\n")
    fp.write("               !calc ibias = @ibias + 1\n")
    fp.write("               !calc coeff = @ss@@{sj}s@@{jj}s@@{si}s@@{ii} + @{s_shift}\n")
    fp.write("               !ldbv @ibias @jp1 @ip1 8 0.017 @coeff 0\n")
    fp.write("               !calc ibias = @ibias + 1\n")
    fp.write("               !calc jj = @jj + 1\n")
    fp.write("               !goto loop7_vb\n")
    fp.write("            !endif\n")
    fp.write("            !calc ii = @ii + 1\n")
    fp.write("            !goto loop6_vb\n")
    fp.write("         !endif\n")
    fp.write("         !calc jblock = @jblock + @nsubs@@{sj}\n")
    fp.write("         !calc sj = @sj + 1\n")
    fp.write("         !goto loop5b_vb\n")
    fp.write("      !endif\n")
    fp.write("      !calc iblock = @iblock + @nsubs@@{si}\n")
    fp.write("      !calc si = @si + 1\n")
    fp.write("      !goto loop5_vb\n")
    fp.write("   !endif\n")

    fp.write("END\n\n")

    fp.write("!! Create water box & periodic images\n")
    fp.write("coor stat\n")
    fp.write("crystal define cubic @box @box @box 90. 90. 90.\n")
    fp.write("crystal build cutoff 14 nope 0\n")
    fp.write("image byres xcen 0 ycen 0 zcen 0 sele resn tip3 .or. resn sod .or. resn cla end\n")
    fp.write("image byseg xcen 0 ycen 0 zcen 0 sele .not. ( resn tip3 .or. resn sod .or. resn cla ) end\n\n")
    fp.write("!! Copy main coords into comp set\n")
    fp.write("cons harm clear\ncoor copy comp\n\n")

    # turn off NOEs by default - makes more user customizable

    fp.write("!! !! Set NOE distance restraints\n")
    fp.write("!! NOE\n")
    fp.write("!!    RESET\n")
    fp.write("!! END\n")
    fp.write("!! \n")
    fp.write("faster on\n")
    fp.write("NBONDS CUTNB 14 CTOFNB 12 CTONNB 10 ")
    fp.write("NBONDS EWALD PMEWald Kappa 0.34 Order 4 FFTX "+str(pmegrid)+" FFTY "+str(pmegrid)+" FFTZ "+str(pmegrid)+"\n\n")

    fp.write("!Cleans up all previous constraints\n")
    fp.write("!clean up all fixed constraint\n")
    fp.write("CONS FIX SELE NONE END\n")
    fp.write("!clean up all harmonic restraint\n")
    fp.write("CONS HARM CLEAR\n")
    fp.write("!clean all distance constraints\n")
    fp.write("NOE\n")
    fp.write(" RESET\n")
    fp.write(" END\n")
    fp.write("!clean up all dihedral constraints\n")
    fp.write("CONS CLDH\n\n")

    fp.write("SHAKE OFF\n\n")

    fp.write("MINI SD NSTEP 1000 NPRINT 50 TOLGRD 3\n")
    fp.write("MINI CONJ NSTEP 200 NPRINT 50 TOLGRD 0.1 TOLENR 0 TOLSTP 0.000000\n\n")

    fp.write("IOFOrmat exte\n")
    fp.write("!! !! Write Initial System to Disk\n")
    fp.write("write psf card name ligand_mini.psf\n")
    fp.write("write coor pdb card name ligand_mini.pdb\n")
    fp.write("write coor card name ligand_mini.crd\n\n")

    fp.write("ENERGY\n\n")

    fp.write("STOP\n\n")
    
    fp.close()

    return
